
public class BinaryTree {

	private treeNode root;
	
	public void addBST(int val){
		treeNode newNode = new treeNode (val, null,null);
		if(root == null)
			root = newNode;
		else{
			treeNode cursor = root;
			boolean done = false;
			while(!done){
				if(val<=cursor.getData()){//go left
					if(cursor.getLeft() == null){
						cursor.setLeft(newNode);
						done = true;
					}
					else
						cursor = cursor.getLeft();
				}
				else{//go right
					if(cursor.getRight() == null){
						cursor.setRight(newNode);
						done = true;
					}
					else
						cursor = cursor.getRight();
				}
			} // {48,34,44,77,30,73,23,76,10,55}
		}
	}
	
	/*
	 * The pre order: parent, left, right.
	 * in order: left, parent, right.
	 * post order: left right parent.
	 */
	public void preOrderPrint(){ 
		preOrderPrint(root);
	}
	private void preOrderPrint(treeNode cursor) {
		if(cursor != null){
			System.out.print(cursor.getData()+" ");
			preOrderPrint(cursor.getLeft());
			preOrderPrint(cursor.getRight());
		}
	}
	
	public void inOrderPrint(){
		inOrderPrint(root);
	}

	private void inOrderPrint(treeNode cursor) {
		if(cursor != null){
			inOrderPrint(cursor.getLeft());
			System.out.print(cursor.getData()+ " ");
			inOrderPrint(cursor.getRight());
		}
		
	}

	public static void main(String[] args) {
		BinaryTree bt = new BinaryTree();
		int[] data = {48,34,44,77,30,73,23,76,10,55};
		for (int i = 0; i < 10; i++){
			//int val = (int)(Math.random()*100); //to generate random numbers to build tree.
			//System.out.println(val);
			bt.addBST(data[i]);
		}
		bt.preOrderPrint();
		bt.inOrderPrint();
		//System.out.println();

	}

}
